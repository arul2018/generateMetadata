# write the col names and attributes of several sfdc objs each to its own spreadsheet

# dependencies:
  # simple_salesforce
  # gspread

from simple_salesforce import Salesforce

import pandas as pd

USER='***'
PWD='***'
token='***'

# to access UAT set the sandbox true option
# sf = Salesforce(username=USER, password=PWD, security_token=token, sandbox=True)
sf = Salesforce(username=USER, password=PWD, security_token=token)

def get_obj_meta_to_df(object_name):
    sf = Salesforce(username=USER, password=PWD, security_token=token)
    md = sf.restful("sobjects/{}/describe/".format(object_name), params=None)
    
    d = md['fields']	
    df = pd.DataFrame(d)

    col_list = ['name','type','length','scale']
    df2 = df[col_list]
    
    # remove NaNs and replace with blanks
    df2.fillna('', inplace=True)
    

    return df2

def write_df_to_gdoc(df, wks_name, spreadsheet_key):

    import gspread
    service_file='C:\\Users\\arul.francis\\Desktop\\mystuff\\creds\\BreakOutIndivSheets.json'
    
    from oauth2client.service_account import ServiceAccountCredentials
    scope = ['https://spreadsheets.google.com/feeds']
    credentials = ServiceAccountCredentials.from_json_keyfile_name(service_file, scope)
    gc = gspread.authorize(credentials)
    
    book = gc.open_by_key(spreadsheet_key)

    from df2gspread import df2gspread as d2g
    d2g.upload(df, spreadsheet_key, wks_name, credentials=credentials, row_names=True)


spreadsheet_key = '99999'

s = '''Account, User, Contact, Lead, Opportunity, Task'''

objects = s.split(', ')

for object_name in objects:
    df3 = get_obj_meta_to_df(object_name)
    write_df_to_gdoc(df3, object_name, spreadsheet_key)

# ignore the 
# 		A value is trying to be set on a copy of a slice from a DataFrame
