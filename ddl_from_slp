# Import the interface required by the Script snap.
from com.snaplogic.scripting.language import ScriptHook
import java.util

class TransformScript(ScriptHook):
    def __init__(self, input, output, error, log):
        self.input = input
        self.output = output
        self.error = error
        self.log = log

    # The "execute()" method is called once when the pipeline is started
    # and allowed to process its inputs or just send data to its outputs.
    def execute(self):
        self.log.info("Executing Transform script")
        while self.input.hasNext():
            data = self.input.next()
            
            # 1, set up a pipeline parameter : 
            # _defaultwidth : VARCHAR(100)
            
            # 2. using a preceding TAIL snap to give just a single row of data
            
            # 3. use a following mapper snap and keep only the "ddl" col
            
            # get all the attributes
            attributes = data.keySet()
            
            import re 
            
             # find anything other than a letter or number
            pattern = re.compile('[\W_]+')
            
            # replace the pattern with an underscore
            attributes = [pattern.sub('_', attribute)  for attribute in attributes]
  
            # use parameter to build a delimiter
            delimiter = " " + $_defaultwidth + ",\n "        
            final_delimiter = " " + $_defaultwidth + ");"   
            column_list =  delimiter.join([str(v) for v in attributes])
            
            ddl = 'CREATE TABLE ' + $_sheetname + ' ('
            ddl += column_list
            ddl +=  final_delimiter
            
            data["ddl"] = ddl
            
            try:
                # output just the ddl statement
                self.output.write(data)
            except Exception as e:
                data["errorMessage"] = e.message
                self.error.write(data)

        self.log.info("Finished executing the Transform script")

# The Script Snap will look for a ScriptHook object in the "hook"
# variable.  The snap will then call the hook's "execute" method.
hook = TransformScript(input, output, error, log)
